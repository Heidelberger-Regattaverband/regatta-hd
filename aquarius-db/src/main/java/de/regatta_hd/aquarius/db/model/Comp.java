package de.regatta_hd.aquarius.db.model;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Auto-generated by: org.apache.openjpa.jdbc.meta.ReverseMappingTool$AnnotatedCodeGenerator
 */
@Entity
@Table(schema = "dbo", name = "Comp")
@IdClass(de.regatta_hd.aquarius.db.model.CompId.class)
public class Comp {
	@Basic
	@Column(name = "Comp_Cancelled")
	private boolean compCancelled;

	@Basic
	@Column(name = "Comp_DateTime", columnDefinition = "datetime")
	private Date compDateTime;

	@Basic
	@Column(name = "Comp_Dummy")
	private boolean compDummy;

	@OneToMany(targetEntity = de.regatta_hd.aquarius.db.model.CompEntries.class, mappedBy = "comp", cascade = CascadeType.MERGE)
	private Set<CompEntries> compEntries = new HashSet<>();

	@Basic
	@Column(name = "Comp_GroupValue")
	private short compGroupValue;

	@Basic
	@Column(name = "Comp_HeatNumber")
	private Short compHeatNumber;

	@Id
	@Column(name = "Comp_ID", columnDefinition = "int identity")
	private int compID;

	@Basic
	@Column(name = "Comp_Label", length = 32)
	private String compLabel;

	@Basic
	@Column(name = "Comp_Locked")
	private boolean compLocked;

	@Basic
	@Column(name = "Comp_Number")
	private short compNumber;

	@OneToMany(targetEntity = de.regatta_hd.aquarius.db.model.CompReferee.class, mappedBy = "comp", cascade = CascadeType.MERGE)
	private Set<CompReferee> compReferees = new HashSet<>();

	@Basic
	@Column(name = "Comp_Round")
	private Short compRound;

	@Basic
	@Column(name = "Comp_RoundCode", length = 8)
	private String compRoundCode;

	@Basic
	@Column(name = "Comp_State")
	private byte compState;

	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.MERGE)
	@JoinColumn(name = "Comp_Event_ID_FK", nullable = false)
	private Event event;

	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.MERGE)
	@JoinColumn(name = "Comp_Race_ID_FK")
	private Offer offer;

	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.MERGE)
	@JoinColumn(name = "Comp_RMDetail_ID_FK")
	private RaceModeDetail raceModeDetail;

	@OneToMany(targetEntity = de.regatta_hd.aquarius.db.model.ReportInfo.class, mappedBy = "comp", cascade = CascadeType.MERGE)
	private Set<ReportInfo> reportInfos = new HashSet<>();

	public Comp() {
	}

	public Comp(int compID) {
		this.compID = compID;
	}

	public boolean isCompCancelled() {
		return this.compCancelled;
	}

	public void setCompCancelled(boolean compCancelled) {
		this.compCancelled = compCancelled;
	}

	public Date getCompDateTime() {
		return this.compDateTime;
	}

	public void setCompDateTime(Date compDateTime) {
		this.compDateTime = compDateTime;
	}

	public boolean isCompDummy() {
		return this.compDummy;
	}

	public void setCompDummy(boolean compDummy) {
		this.compDummy = compDummy;
	}

	public Set<CompEntries> getCompEntries() {
		return this.compEntries;
	}

	public void setCompEntries(Set<CompEntries> compEntries) {
		this.compEntries = compEntries;
	}

	public short getCompGroupValue() {
		return this.compGroupValue;
	}

	public void setCompGroupValue(short compGroupValue) {
		this.compGroupValue = compGroupValue;
	}

	public Short getCompHeatNumber() {
		return this.compHeatNumber;
	}

	public void setCompHeatNumber(Short compHeatNumber) {
		this.compHeatNumber = compHeatNumber;
	}

	public int getCompID() {
		return this.compID;
	}

	public void setCompID(int compID) {
		this.compID = compID;
	}

	public String getCompLabel() {
		return this.compLabel;
	}

	public void setCompLabel(String compLabel) {
		this.compLabel = compLabel;
	}

	public boolean isCompLocked() {
		return this.compLocked;
	}

	public void setCompLocked(boolean compLocked) {
		this.compLocked = compLocked;
	}

	public short getCompNumber() {
		return this.compNumber;
	}

	public void setCompNumber(short compNumber) {
		this.compNumber = compNumber;
	}

	public Set<CompReferee> getCompReferees() {
		return this.compReferees;
	}

	public void setCompReferees(Set<CompReferee> compReferees) {
		this.compReferees = compReferees;
	}

	public Short getCompRound() {
		return this.compRound;
	}

	public void setCompRound(Short compRound) {
		this.compRound = compRound;
	}

	public String getCompRoundCode() {
		return this.compRoundCode;
	}

	public void setCompRoundCode(String compRoundCode) {
		this.compRoundCode = compRoundCode;
	}

	public byte getCompState() {
		return this.compState;
	}

	public void setCompState(byte compState) {
		this.compState = compState;
	}

	public Event getEvent() {
		return this.event;
	}

	public void setEvent(Event event) {
		this.event = event;
	}

	public Offer getOffer() {
		return this.offer;
	}

	public void setOffer(Offer offer) {
		this.offer = offer;
	}

	public RaceModeDetail getRaceModeDetail() {
		return this.raceModeDetail;
	}

	public void setRaceModeDetail(RaceModeDetail raceModeDetail) {
		this.raceModeDetail = raceModeDetail;
	}

	public Set<ReportInfo> getReportInfos() {
		return this.reportInfos;
	}

	public void setReportInfos(Set<ReportInfo> reportInfos) {
		this.reportInfos = reportInfos;
	}
}