package de.regatta_hd.aquarius.db.model;

import java.io.Serializable;

/**
 * Application identity class for: de.regatta_hd.aquarius.db.model.Result
 *
 * Auto-generated by: org.apache.openjpa.enhance.ApplicationIdTool
 */
public class ResultId implements Serializable {

	private static final long serialVersionUID = 1140277898086880875L;

	static {
		// register persistent class in JVM
		try {
			Class.forName("de.regatta_hd.aquarius.db.model.Result");
		} catch (Exception e) {
		}
	}

	public int resultCEIDFK;
	public byte resultSplitNr;

	public ResultId() {
	}

	public ResultId(String str) {
		fromString(str);
	}

	public int getResultCEIDFK() {
		return this.resultCEIDFK;
	}

	public void setResultCEIDFK(int resultCEIDFK) {
		this.resultCEIDFK = resultCEIDFK;
	}

	public byte getResultSplitNr() {
		return this.resultSplitNr;
	}

	public void setResultSplitNr(byte resultSplitNr) {
		this.resultSplitNr = resultSplitNr;
	}

	@Override
	public String toString() {
		return String.valueOf(this.resultCEIDFK) + "::" + String.valueOf(this.resultSplitNr);
	}

	@Override
	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + this.resultCEIDFK;
		rs = rs * 37 + this.resultSplitNr;
		return rs;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null || obj.getClass() != getClass())
			return false;

		ResultId other = (ResultId) obj;
		return (this.resultCEIDFK == other.resultCEIDFK) && (this.resultSplitNr == other.resultSplitNr);
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		this.resultCEIDFK = Integer.parseInt(toke.nextToken());
		this.resultSplitNr = Byte.parseByte(toke.nextToken());
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer(String str) {
			this.str = str;
		}

		public String nextToken() {
			int next = this.str.indexOf("::", this.last);
			String part;
			if (next == -1) {
				part = this.str.substring(this.last);
				this.last = this.str.length();
			} else {
				part = this.str.substring(this.last, next);
				this.last = next + 2;
			}
			return part;
		}
	}
}